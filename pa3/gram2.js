/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,8],$V2=[2,6],$V3=[1,17],$V4=[1,33],$V5=[2,12],$V6=[1,36],$V7=[1,58],$V8=[1,65],$V9=[1,66],$Va=[1,56],$Vb=[1,57],$Vc=[1,59],$Vd=[1,60],$Ve=[1,61],$Vf=[1,62],$Vg=[1,63],$Vh=[1,64],$Vi=[1,67],$Vj=[1,68],$Vk=[1,69],$Vl=[1,72],$Vm=[1,73],$Vn=[1,74],$Vo=[1,75],$Vp=[1,76],$Vq=[1,77],$Vr=[1,78],$Vs=[1,79],$Vt=[1,80],$Vu=[7,13,19,27,28,29,32,33,34,36,37,42,44,49,50,51,52,54,55,56],$Vv=[11,17,68,69,70,71,72,73,74,75,76,77,78,79,80],$Vw=[2,47],$Vx=[7,13,19,27,32,33,34,36,37,42,44,49,50,51,52,54,55,56],$Vy=[7,13,19,27,32,33,34,36,37,42,44],$Vz=[7,13,19,27,32,33,34,36,37,42,44,49,50,54,55,56],$VA=[1,120],$VB=[27,42],$VC=[1,142];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"program":4,"EOF":5,"class":6,"SEMI":7,"CLASS":8,"type":9,"INHERITS":10,"LBRACE":11,"feature_s":12,"RBRACE":13,"feature_p":14,"feature":15,"identifier":16,"LPAREN":17,"formal_option":18,"RPAREN":19,"COLON":20,"expr":21,"larrow_option":22,"LARROW":23,"formal":24,"formal_s":25,"formal_p":26,"COMMA":27,"AT":28,"DOT":29,"expr_option":30,"if":31,"THEN":32,"ELSE":33,"FI":34,"while":35,"LOOP":36,"POOL":37,"lbrace":38,"expr_p":39,"let":40,"id_type_expr_s":41,"IN":42,"case":43,"OF":44,"id_type_expr_p":45,"ESAC":46,"new":47,"isvoid":48,"PLUS":49,"MINUS":50,"TIMES":51,"DIVIDE":52,"tilde":53,"LT":54,"LE":55,"EQUALS":56,"not":57,"lparen":58,"integer":59,"string":60,"true":61,"false":62,"expr_s":63,"expr_s_p":64,"id_type_expr_s_p":65,"RARROW":66,"TYPE":67,"IDENTIFIER":68,"INTEGER":69,"IF":70,"WHILE":71,"LET":72,"CASE":73,"NEW":74,"ISVOID":75,"TILDE":76,"NOT":77,"STRING":78,"TRUE":79,"FALSE":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"SEMI",8:"CLASS",10:"INHERITS",11:"LBRACE",13:"RBRACE",17:"LPAREN",19:"RPAREN",20:"COLON",23:"LARROW",27:"COMMA",28:"AT",29:"DOT",32:"THEN",33:"ELSE",34:"FI",36:"LOOP",37:"POOL",42:"IN",44:"OF",46:"ESAC",49:"PLUS",50:"MINUS",51:"TIMES",52:"DIVIDE",54:"LT",55:"LE",56:"EQUALS",66:"RARROW",67:"TYPE",68:"IDENTIFIER",69:"INTEGER",70:"IF",71:"WHILE",72:"LET",73:"CASE",74:"NEW",75:"ISVOID",76:"TILDE",77:"NOT",78:"STRING",79:"TRUE",80:"FALSE"},
productions_: [0,[3,2],[4,2],[4,3],[6,7],[6,5],[12,0],[12,1],[14,2],[14,3],[15,9],[15,4],[22,0],[22,2],[18,0],[18,2],[24,3],[25,0],[25,1],[26,2],[26,3],[21,3],[21,8],[21,6],[21,4],[21,7],[21,5],[21,3],[21,8],[21,5],[21,2],[21,2],[21,3],[21,3],[21,3],[21,3],[21,2],[21,3],[21,3],[21,3],[21,2],[21,3],[21,1],[21,1],[21,1],[21,1],[21,1],[30,0],[30,2],[63,0],[63,1],[64,2],[64,3],[39,2],[39,3],[41,0],[41,1],[65,5],[65,6],[45,6],[45,7],[9,1],[16,1],[59,1],[31,1],[35,1],[38,1],[40,1],[43,1],[47,1],[48,1],[53,1],[57,1],[58,1],[60,1],[61,1],[62,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 56:
this.$ = $$[$0];
break;
}
},
table: [{3:1,4:2,6:3,8:$V0},{1:[3]},{5:[1,5]},{7:[1,6]},{9:7,67:$V1},{1:[2,1]},{4:9,5:[2,2],6:3,8:$V0},{10:[1,10],11:[1,11]},o([7,10,11,13,19,23,27,28,29,32,33,34,36,37,42,44,49,50,51,52,54,55,56,66],[2,61]),{5:[2,3]},{9:12,67:$V1},{12:13,13:$V2,14:14,15:15,16:16,68:$V3},{11:[1,18]},{13:[1,19]},{13:[2,7]},{7:[1,20]},{17:[1,21],20:[1,22]},o([7,13,17,19,20,23,27,28,29,32,33,34,36,37,42,44,49,50,51,52,54,55,56],[2,62]),{12:23,13:$V2,14:14,15:15,16:16,68:$V3},{7:[2,5]},{13:[2,8],14:24,15:15,16:16,68:$V3},{16:27,18:25,19:[2,14],24:26,68:$V3},{9:28,67:$V1},{13:[1,29]},{13:[2,9]},{19:[1,30]},{19:[2,17],25:31,26:32,27:$V4},{20:[1,34]},{7:$V5,22:35,23:$V6},{7:[2,4]},{20:[1,37]},{19:[2,15]},{19:[2,18]},{16:27,24:38,68:$V3},{9:39,67:$V1},{7:[2,11]},{11:$V7,16:41,17:$V8,21:40,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{9:70,67:$V1},{19:[2,19],26:71,27:$V4},o([19,27],[2,16]),o([7,27,42],[2,13],{28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt}),o($Vu,[2,42],{17:[1,82],23:[1,81]}),{11:$V7,16:41,17:$V8,21:83,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:84,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:86,31:42,35:43,38:44,39:85,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{16:87,68:$V3},{11:$V7,16:41,17:$V8,21:88,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{9:89,67:$V1},{11:$V7,16:41,17:$V8,21:90,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:91,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:92,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:93,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($Vu,[2,43]),o($Vu,[2,44]),o($Vu,[2,45]),o($Vu,[2,46]),o($Vv,[2,64]),o($Vv,[2,65]),o($Vv,[2,66]),{68:[2,67]},o($Vv,[2,68]),{67:[2,69]},o($Vv,[2,70]),o($Vv,[2,71]),o($Vv,[2,72]),o($Vv,[2,73]),o($Vu,[2,63]),o($Vu,[2,74]),o($Vu,[2,75]),o($Vu,[2,76]),{11:[1,94]},{19:[2,20]},{9:95,67:$V1},{16:96,68:$V3},{11:$V7,16:41,17:$V8,21:97,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:98,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:99,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:100,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:101,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:102,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:103,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:104,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,19:$Vw,21:106,30:105,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{28:$Vl,29:$Vm,32:[1,107],49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt},{28:$Vl,29:$Vm,36:[1,108],49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt},{13:[1,109]},{7:[1,110],28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt},{20:[1,111]},{28:$Vl,29:$Vm,44:[1,112],49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt},o($Vu,[2,30]),o($Vx,[2,31],{28:$Vl,29:$Vm}),o($Vx,[2,36],{28:$Vl,29:$Vm}),o($Vy,[2,40],{28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt}),{19:[1,113],28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt},{11:$V7,16:41,17:$V8,21:114,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{29:[1,115]},{17:[1,116]},o($Vz,[2,32],{28:$Vl,29:$Vm,51:$Vp,52:$Vq}),o($Vz,[2,33],{28:$Vl,29:$Vm,51:$Vp,52:$Vq}),o($Vx,[2,34],{28:$Vl,29:$Vm}),o($Vx,[2,35],{28:$Vl,29:$Vm}),o($Vy,[2,37],{28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq}),o($Vy,[2,38],{28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq}),o($Vy,[2,39],{28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq}),o($Vy,[2,21],{28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt}),{19:[1,117]},{19:[2,49],27:$VA,28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,63:118,64:119},{11:$V7,16:41,17:$V8,21:121,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{11:$V7,16:41,17:$V8,21:122,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($Vu,[2,27]),{11:$V7,13:[2,53],16:41,17:$V8,21:86,31:42,35:43,38:44,39:123,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{9:124,67:$V1},{16:126,45:125,68:$V3},o($Vu,[2,41]),{13:[1,127],28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt},{16:128,68:$V3},{11:$V7,16:41,17:$V8,19:$Vw,21:106,30:129,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($Vu,[2,24]),{19:[2,48]},{19:[2,50]},{11:$V7,16:41,17:$V8,21:130,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{28:$Vl,29:$Vm,33:[1,131],49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt},{28:$Vl,29:$Vm,37:[1,132],49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt},{13:[2,54]},o($VB,$V5,{22:133,23:$V6}),{46:[1,134]},{20:[1,135]},{7:[2,10]},{17:[1,136]},{19:[1,137]},{19:[2,51],27:$VA,28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt,64:138},{11:$V7,16:41,17:$V8,21:139,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($Vu,[2,26]),{27:$VC,41:140,42:[2,55],65:141},o($Vu,[2,29]),{9:143,67:$V1},{11:$V7,16:41,17:$V8,19:$Vw,21:106,30:144,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($Vu,[2,23]),{19:[2,52]},{28:$Vl,29:$Vm,34:[1,145],49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt},{42:[1,146]},{42:[2,56]},{16:147,68:$V3},{66:[1,148]},{19:[1,149]},o($Vu,[2,25]),{11:$V7,16:41,17:$V8,21:150,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},{20:[1,151]},{11:$V7,16:41,17:$V8,21:152,31:42,35:43,38:44,40:45,43:46,47:47,48:48,53:49,57:50,58:51,59:52,60:53,61:54,62:55,68:$V3,69:$V9,70:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi,79:$Vj,80:$Vk},o($Vu,[2,22]),o($Vy,[2,28],{28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt}),{9:153,67:$V1},{7:[1,154],28:$Vl,29:$Vm,49:$Vn,50:$Vo,51:$Vp,52:$Vq,54:$Vr,55:$Vs,56:$Vt},o($VB,$V5,{22:155,23:$V6}),{16:126,45:156,46:[2,59],68:$V3},{27:$VC,42:[2,57],65:157},{46:[2,60]},{42:[2,58]}],
defaultActions: {5:[2,1],9:[2,3],14:[2,7],19:[2,5],24:[2,9],29:[2,4],31:[2,15],32:[2,18],35:[2,11],59:[2,67],61:[2,69],71:[2,20],118:[2,48],119:[2,50],123:[2,54],127:[2,10],138:[2,52],141:[2,56],156:[2,60],157:[2,58]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}